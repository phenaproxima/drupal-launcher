# Builds a Drupal 11-ready PHP interpreter for Windows.
# The built interpreter only supports the CLI SAPI and a hard-coded list
# of extensions needed for running Drupal and Composer.
# Forked from https://raw.githubusercontent.com/crazywhalecc/static-php-cli/refs/heads/main/.github/workflows/build-windows-x86_64.yml.
# See https://www.drupal.org/docs/getting-started/system-requirements/php-requirements#extensions
name: Build for Windows

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PHP_EXTENSIONS: bz2,ctype,curl,dom,filter,gd,iconv,mbstring,opcache,openssl,pdo,pdo_sqlite,phar,session,simplexml,sqlite3,tokenizer,xml,xmlwriter,yaml,zip,zlib
  PHP_VERSION: 8.4

jobs:
  build:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Cache Composer dependencies.
      - id: cache-composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}

      - if: steps.cache-composer.outputs.cache-hit != 'true'
        run: composer install

      - name: Generate hashed key for download cache
        shell: bash
        run: |
          INPUT_HASH=$(echo "${{ runner.os }}-${{ env.PHP_VERSION }}-${{ env.PHP_EXTENSIONS }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> "$GITHUB_ENV"

      # Cache downloaded source code for PHP's dependencies.
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: sources-${{ env.INPUT_HASH }}

      # Cache the Drupal-ready PHP interpreter.
      - id: cache-runtime
        uses: actions/cache@v4
        with:
          path: buildroot/bin/php.exe
          key: runtime-${{ env.INPUT_HASH }}

      # Cache the minimal PHP interpreter.
      - id: cache-micro
        uses: actions/cache@v4
        with:
          path: buildroot/bin/micro.sfx
          key: micro-${{ runner.os }}

      - run: ./vendor/bin/spc doctor

      # Fetch the source code for PHP's dependencies if they aren't already cached.
      - if: steps.cache-download.outputs.cache-hit != 'true'
        name: Download PHP source code
        run: ./vendor/bin/spc download --with-php="${{ env.PHP_VERSION }}" --for-extensions="${{ env.PHP_EXTENSIONS }}" --prefer-pre-built

      - run: mkdir -p ./drupal-launcher/bin

      # Build the Drupal-ready PHP interpreter and move it into `bin`.
      - if: steps.cache-runtime.outputs.cache-hit != 'true'
        name: Build Drupal-ready PHP interpreter
        run: |
          ./vendor/bin/spc build "${{ env.PHP_EXTENSIONS }}" --build-cli
          cp ./buildroot/bin/php.exe ./drupal-launcher/bin

      # Copy the installed version of Composer into `bin`.
      - run: cp $(which composer) ./drupal-launcher/bin

      # Build the launcher's minimal PHP interpreter.
      - if: steps.cache-micro.outputs.cache-hit != 'true'
        name: Build minimal PHP interpreter
        run: ./vendor/bin/spc build --build-micro phar

      # Package the launcher as a phar file with the minimal PHP interpreter.
      - name: Build standalone launcher
        run: |
          composer build:phar
          ./vendor/bin/spc micro:combine launcher.phar -O ./drupal-launcher/launcher

      # Upload the fully built launcher.
      - uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: drupal-launcher
