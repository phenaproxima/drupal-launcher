# Builds a Drupal 11-ready PHP interpreter for Linux arm64.
# The built interpreter only supports the CLI SAPI and a hard-coded list
# of extensions needed for running Drupal and Composer.
# Forked from https://raw.githubusercontent.com/crazywhalecc/static-php-cli/refs/heads/main/.github/workflows/build-linux-arm.yml.
# See https://www.drupal.org/docs/getting-started/system-requirements/php-requirements#extensions
name: Build for Linux

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PHP_EXTENSIONS: bz2,ctype,curl,dom,filter,gd,iconv,mbstring,opcache,openssl,pcntl,pdo,pdo_sqlite,phar,posix,session,simplexml,sodium,sqlite3,tokenizer,xml,xmlwriter,yaml,zip,zlib
  PHP_VERSION: 8.4
  BUILD_WORKING_DIR: ./vendor/crazywhalecc/static-php-cli
  SPC_USE_ARCH: ${{ matrix.arch }}

jobs:
  build:
    name: Build for Linux
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: latest
          tools: pecl, composer
          extensions: curl, openssl, mbstring, tokenizer
          ini-values: memory_limit=-1

      # Cache Composer dependencies.
      - id: cache-composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}

      - if: steps.cache-composer.outputs.cache-hit != 'true'
        run: composer install

      - name: Generate cache key
        run: |
          INPUT_HASH=$(echo "${{ runner.os }}-${{ env.PHP_VERSION }}-${{ env.PHP_EXTENSIONS }}-${{ matrix.arch }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> $GITHUB_ENV

      # Cache downloaded source code for PHP's dependencies.
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: sources-${{ env.INPUT_HASH }}

      # Cache the Drupal-ready PHP interpreter.
      - id: cache-runtime
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_WORKING_DIR }}/buildroot/bin/php
          key: runtime-${{ env.INPUT_HASH }}

      # Cache the minimal PHP interpreter.
      - id: cache-micro
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_WORKING_DIR }}/buildroot/bin/micro.sfx
          key: micro-${{ runner.os }}-${{ env.SPC_USE_ARCH }}

      # Fetch the source code for PHP's dependencies if they aren't already cached.
      - if: steps.cache-download.outputs.cache-hit != 'true'
        run: ./bin/spc-alpine-docker download --with-php=${{ env.PHP_VERSION }} --for-extensions=${{ env.PHP_EXTENSIONS }} --prefer-pre-built
        working-directory: ${{ env.BUILD_WORKING_DIR }}

      - run: mkdir -p ./drupal-launcher/bin

      # Build the Drupal-ready PHP interpreter and copy it into `bin`.
      - if: steps.cache-runtime.outputs.cache-hit != 'true'
        name: Build Drupal-ready PHP interpreter
        run: |
          ./bin/spc-alpine-docker build ${{ env.PHP_EXTENSIONS }} --build-cli
          cp ${{ env.BUILD_WORKING_DIR }}/buildroot/bin/php ${{ github.workspace }}/drupal-launcher/bin
        working-directory: ${{ env.BUILD_WORKING_DIR }}

      # Copy the installed version of Composer into `bin`.
      - run: cp $(which composer) ./drupal-launcher/bin

      # Build the launcher's minimal PHP interpreter.
      - if: steps.cache-micro.outputs.cache-hit != 'true'
        name: Build minimal PHP interpreter
        run: ./bin/spc-alpine-docker build --build-micro phar
        working-directory: ${{ env.BUILD_WORKING_DIR }}

      # Package the launcher as a phar file.
      - run: composer build:phar

      # Combine the minimal PHP interpreter with the launcher phar.
      - run: ./bin/spc micro:combine launcher.phar -O ${{ github.workspace }}/drupal-launcher/launcher
        working-directory: ${{ env.BUILD_WORKING_DIR }}

      # Upload the fully built launcher.
      - uses: actions/upload-artifact@v4
        with:
          name: launcher-${{ matrix.arch }}-${{ env.SPC_USE_ARCH }}
          path: drupal-launcher
