name: Build runtime for Linux

on:
  workflow_call:
    inputs:
      arch:
        required: true
        description: The machine architecture to build PHP for (x86_64 or aarch64).
        type: string
    outputs:
      run_id:
        description: The workflow run ID, for downloading artifacts.
        value: ${{ github.run_id }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PHP_EXTENSIONS: bz2,ctype,curl,dom,filter,gd,iconv,mbstring,opcache,openssl,pcntl,pdo,pdo_sqlite,phar,posix,session,simplexml,sodium,sqlite3,tokenizer,xml,xmlwriter,yaml,zip,zlib
  PHP_VERSION: 8.3
  SPC_USE_ARCH: ${{ inputs.arch }}

jobs:
  build:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: crazywhalecc/static-php-cli
          ref: 2.4.3

      - name: Generate cache key
        run: |
          CACHE_KEY=${{ runner.os }}-${{ inputs.arch }}-$PHP_VERSION--$(echo $PHP_EXTENSIONS | tr ',' '-')
          echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV

      # Cache the built binaries so we can skip the build steps if there is a cache hit.
      - id: cache
        name: Cache binaries
        uses: actions/cache@v4
        with:
          path: buildroot/bin
          key: binaries-${{ env.CACHE_KEY }}

      - if: steps.cache.outputs.cache-hit != 'true'
        name: "Set up PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: latest
          tools: pecl, composer
          extensions: curl, openssl, mbstring, tokenizer
          ini-values: memory_limit=-1

      - if: steps.cache.outputs.cache-hit != 'true'
        name: Install Composer dependencies
        run: composer install --no-dev

      # Fetch the source code for PHP's dependencies if they aren't already cached.
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Download PHP source code
        run: ./bin/spc-alpine-docker download --with-php=${{ env.PHP_VERSION }} --for-extensions=${{ env.PHP_EXTENSIONS }} --prefer-pre-built

      # Build the minimal and Drupal-ready PHP interpreters.
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Build PHP interpreter
        run: ./bin/spc-alpine-docker build ${{ env.PHP_EXTENSIONS }} --build-cli

      # Upload the built interpreters.
      - uses: actions/upload-artifact@v4
        with:
          name: bin-${{ inputs.arch }}
          path: buildroot/bin
