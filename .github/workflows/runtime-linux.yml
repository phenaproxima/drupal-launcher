name: Build runtime for Linux

on:
  workflow_call:
    inputs:
      arch:
        required: true
        description: The machine architecture to build PHP for (x86_64 or aarch64).
        type: string
    outputs:
      run_id:
        description: The workflow run ID, for downloading artifacts.
        value: ${{ github.run_id }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PHP_EXTENSIONS: bz2,ctype,curl,dom,filter,gd,iconv,mbstring,opcache,openssl,pcntl,pdo,pdo_sqlite,phar,posix,session,simplexml,sodium,sqlite3,tokenizer,xml,xmlwriter,yaml,zip,zlib
  PHP_VERSION: 8.3

jobs:
  build:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: crazywhalecc/static-php-cli
          ref: 2.4.3

      - name: "Set up PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: latest
          tools: pecl, composer
          extensions: curl, openssl, mbstring, tokenizer
          ini-values: memory_limit=-1

      - id: cache-composer
        name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}

      - if: steps.cache-composer.outputs.cache-hit != 'true'
        name: Install Composer dependencies
        run: composer install

      - name: Generate cache key
        run: |
          CACHE_KEY=$(echo "${{ runner.os }}-${{ env.PHP_VERSION }}-${{ env.PHP_EXTENSIONS }}-${{ inputs.arch }}" | sha256sum | awk '{print $1}')
          echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV

      - id: cache-download
        name: Cache PHP source code
        uses: actions/cache@v4
        with:
          path: downloads
          key: sources-${{ env.CACHE_KEY }}

      - id: cache-binaries
        name: Cache binaries
        uses: actions/cache@v4
        with:
          path: buildroot/bin
          key: binaries-${{ env.CACHE_KEY }}

      # Fetch the source code for PHP's dependencies if they aren't already cached.
      - if: steps.cache-download.outputs.cache-hit != 'true'
        name: Download PHP source code
        run: SPC_USE_ARCH=${{ inputs.arch }} ./bin/spc-alpine-docker download --with-php=${{ env.PHP_VERSION }} --for-extensions=${{ env.PHP_EXTENSIONS }} --prefer-pre-built

      # Build the Drupal-ready PHP interpreter.
      - if: steps.cache-runtime.outputs.cache-hit != 'true'
        name: Build Drupal-ready PHP interpreter
        run: SPC_USE_ARCH=${{ inputs.arch }} ./bin/spc-alpine-docker build ${{ env.PHP_EXTENSIONS }} --build-cli

      # Build the minimal PHP interpreter.
      - if: steps.cache-micro.outputs.cache-hit != 'true'
        name: Build minimal PHP interpreter
        run: ./bin/spc-alpine-docker build --build-micro phar

      # Upload the built interpreters.
      - uses: actions/upload-artifact@v4
        with:
          name: php-${{ env.PHP_VERSION }}-${{ runner.os }}-${{ inputs.arch }}
          path: buildroot/bin
